
type User {
    id: ID!
    firstName: String!
    surname: String!
    email: Email!
    login: String!
    gender: Gender
    age: Int
    createdTrips(limit: Int): [Trip!]!
}

type UserNotFound {
    id: ID!
}

union UserCandidate = UserNotFound | User


type UserPayload {
    userId: String
}

type TripPayload {
    tripId: String
}

type UpdatePlacePayload {
    tripId: String
}

type UpdateAgePayload {
    userId: String
}

input UserDto {
    id: ID!
    firstName: String!
    surname: String!
    email: Email!
    login: String!
    gender: Gender
    age: Int
    createdTripsIds: [String!]!
}

enum Gender {
FEMALE, MALE
}

union TripCandidate = TripNotFound | Trip

type TripNotFound{
    id: ID!
}

type Trip {
    id: ID!
    name: String!
    place: String!
    description: String!
    maxParticipantsCount: Int
    pricePln: PLNCurrency
    participants(limit: Int): [User!]!
    owner: UserCandidate
}

input TripDto{
    id: ID!
    name: String!
    place: String!
    description: String!
    maxParticipantsCount: Int
    pricePln: PLNCurrency
    ownerId: String!
    participantsId: [String!]!
}

input UpdatePlace {
    id: ID!
    place: String!
}

input UpdateAge {
    id: ID!
    age: Int!
}

scalar PLNCurrency


scalar Email
